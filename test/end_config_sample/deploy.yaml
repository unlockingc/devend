---
name: required
disabled: 


files: 
# 只有系统配置，就是软件暴露的借口在这，其他全部接管
[
  { 
    file : [xxx] regex_express,
    install_path: 
    dependency {
      type : "customize/plugin_by_hook/overwrite/modify/exclusive_modify",
      modify : {
        type: json

      }
      modify这边依赖的host可以提供一个解析方法，这个解析方法就是一个抽象层，依赖可以根据不同的解析方法进行modify，
      常用的解析方法比如json或者yaml,或者js的对象，最不行的兜底方案就是正则表达式，以行 为最小修改单位的。
      单位之间是exclusive的，

      行的问题在于，我正则替换了以后你就match不上了，所以只能设成最小单位。完全可以修改文件，把一行分裂成多行
      这样基本能解决问题。

    }
    required:
    disabled: 
  }
  
]

plugin_hook : {
  executable: "",
  plugin_path: "",这边的接口做到，我plugin只需要指定一个文件，说，你去帮我放好，至于你放完怎么和你的主程序绑定
  executable负责，每次这个plugin加上，这个executable执行一遍，
  看看什么需要改，plugin最多再给个path信息，就这还是应该在程序里处理的，而不是接口上
  不行就别用plugin，用modify
}

supported_modify_style: [regex, json_patch(with a little adaptor executable)]
...

```
map:
waiting_plugin/
installed_plugin/
disabled_plugin/

监听文件更改然后触发某种动作的库文件
```